// <auto-generated />
using CVT.Galvanize.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CVT.Galvanize.Data.Migrations
{
    [DbContext(typeof(GalvanizeContext))]
    partial class GalvanizeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CVT.Galvanize.Data.ClientProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ClientProvider");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.CvtSites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("CvtSites");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.Interactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MatchId");

                    b.Property<string>("NoteText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.Languages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.Matches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("VolunteerCoordinatorId");

                    b.Property<int>("VolunteerId");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerCoordinatorId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.MatchesClientProviders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientProviderId");

                    b.Property<int>("MatchesId");

                    b.HasKey("Id");

                    b.HasIndex("ClientProviderId");

                    b.HasIndex("MatchesId");

                    b.ToTable("MatchesClientProviders");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.MatchesVolunteerRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MatchesId");

                    b.Property<int?>("VolunteerRoleId");

                    b.HasKey("Id");

                    b.HasIndex("MatchesId");

                    b.HasIndex("VolunteerRoleId");

                    b.ToTable("MatchesVolunteerRoles");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.VolunteerCvtSites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CvtSiteId");

                    b.Property<int>("VolunteerId");

                    b.HasKey("Id");

                    b.HasIndex("CvtSiteId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("VolunteerCvtSites");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.VolunteerInterests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("VolunteerId");

                    b.Property<int?>("VolunteeringCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerId");

                    b.HasIndex("VolunteeringCategoryId");

                    b.ToTable("VolunteerInterests");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.VolunteerLanguages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LanguageId");

                    b.Property<int>("VolunteerId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("VolunteerLanguages");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.VolunteerNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("NoteText")
                        .HasColumnType("text");

                    b.Property<int>("VolunteerId");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerId");

                    b.ToTable("VolunteerNotes");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.VolunteerRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("VolunteerRoles");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.Volunteers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(150);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(150);

                    b.Property<bool?>("BackgroundCheck");

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(150);

                    b.Property<string>("CellPhone")
                        .HasMaxLength(150);

                    b.Property<string>("City")
                        .HasMaxLength(150);

                    b.Property<bool?>("CsInterest");

                    b.Property<DateTime?>("CsOrientationdate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateInterviewed")
                        .HasColumnType("datetime");

                    b.Property<string>("Email1")
                        .HasMaxLength(150);

                    b.Property<string>("Email2")
                        .HasMaxLength(150);

                    b.Property<string>("FirstName")
                        .HasMaxLength(150);

                    b.Property<bool?>("Hippa");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(150);

                    b.Property<string>("ImportantNames")
                        .HasColumnType("text");

                    b.Property<bool>("IsVolunteerCoordinator");

                    b.Property<string>("LastName")
                        .HasMaxLength(150);

                    b.Property<bool?>("MandatedReporter");

                    b.Property<DateTime?>("PostOrientationFollowupDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ReferencesResponded");

                    b.Property<string>("State")
                        .HasMaxLength(50);

                    b.Property<string>("Zip")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.VolunteringCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("VolunteringCategories");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.Matches", b =>
                {
                    b.HasOne("CVT.Galvanize.Data.Volunteers", "VolunteerCoordinator")
                        .WithMany("MatchesVolunteerCoordinator")
                        .HasForeignKey("VolunteerCoordinatorId")
                        .HasConstraintName("FK_Matches_Volunteers");

                    b.HasOne("CVT.Galvanize.Data.Interactions", "Volunteer")
                        .WithMany("Matches")
                        .HasForeignKey("VolunteerId")
                        .HasConstraintName("FK_Matches_Interactions");

                    b.HasOne("CVT.Galvanize.Data.Volunteers", "VolunteerNavigation")
                        .WithMany("MatchesVolunteerNavigation")
                        .HasForeignKey("VolunteerId")
                        .HasConstraintName("FK_Matches_Volunteers1");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.MatchesClientProviders", b =>
                {
                    b.HasOne("CVT.Galvanize.Data.ClientProvider", "ClientProvider")
                        .WithMany("MatchesClientProviders")
                        .HasForeignKey("ClientProviderId")
                        .HasConstraintName("FK_MatchesClientProviders_ClientProvider");

                    b.HasOne("CVT.Galvanize.Data.Matches", "Matches")
                        .WithMany("MatchesClientProviders")
                        .HasForeignKey("MatchesId")
                        .HasConstraintName("FK_MatchesClientProviders_Matches");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.MatchesVolunteerRoles", b =>
                {
                    b.HasOne("CVT.Galvanize.Data.Matches", "Matches")
                        .WithMany("MatchesVolunteerRoles")
                        .HasForeignKey("MatchesId")
                        .HasConstraintName("FK_MatchesVolunteerRoles_Matches");

                    b.HasOne("CVT.Galvanize.Data.VolunteerRoles", "VolunteerRole")
                        .WithMany("MatchesVolunteerRoles")
                        .HasForeignKey("VolunteerRoleId")
                        .HasConstraintName("FK_MatchesVolunteerRoles_VolunteerRoles");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.VolunteerCvtSites", b =>
                {
                    b.HasOne("CVT.Galvanize.Data.CvtSites", "CvtSite")
                        .WithMany("VolunteerCvtSites")
                        .HasForeignKey("CvtSiteId")
                        .HasConstraintName("FK_VolunteerCvtSites_CvtSites");

                    b.HasOne("CVT.Galvanize.Data.Volunteers", "Volunteer")
                        .WithMany("VolunteerCvtSites")
                        .HasForeignKey("VolunteerId")
                        .HasConstraintName("FK_VolunteerCvtSites_Volunteers");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.VolunteerInterests", b =>
                {
                    b.HasOne("CVT.Galvanize.Data.Volunteers", "Volunteer")
                        .WithMany("VolunteerInterests")
                        .HasForeignKey("VolunteerId")
                        .HasConstraintName("FK_VolunteerInterests_Volunteers");

                    b.HasOne("CVT.Galvanize.Data.VolunteringCategories", "VolunteeringCategory")
                        .WithMany("VolunteerInterests")
                        .HasForeignKey("VolunteeringCategoryId")
                        .HasConstraintName("FK_VolunteerInterests_VolunteringCategories");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.VolunteerLanguages", b =>
                {
                    b.HasOne("CVT.Galvanize.Data.Languages", "Language")
                        .WithMany("VolunteerLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_VolunteerLanguages_Languages");

                    b.HasOne("CVT.Galvanize.Data.Volunteers", "Volunteer")
                        .WithMany("VolunteerLanguages")
                        .HasForeignKey("VolunteerId")
                        .HasConstraintName("FK_VolunteerLanguages_Volunteers");
                });

            modelBuilder.Entity("CVT.Galvanize.Data.VolunteerNotes", b =>
                {
                    b.HasOne("CVT.Galvanize.Data.Volunteers", "Volunteer")
                        .WithMany("VolunteerNotes")
                        .HasForeignKey("VolunteerId")
                        .HasConstraintName("FK_VolunteerNotes_Volunteers");
                });
#pragma warning restore 612, 618
        }
    }
}
